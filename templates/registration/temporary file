in settings:
OPENAI_API_KEY = env("OPENAI_API_KEY")


in logged_in after "are you sure about these playlists":
                <!-- Display the music description -->
                <div class="carousel-item">
                    <h3 class="mt-4 text-primary text-center">Who You Are Through Music</h3>
                    <p class="lead text-light text-center">{{ music_description }}</p>
                </div>


in env:

OPENAI_API_KEY='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'


in views:

import openai


openai.api_key = settings.OPENAI_API_KEY  # Make sure you set this in your settings.py


def create_music_profile_description(top_artists, genres):
    artist_names = [artist['name'] for artist in top_artists['items']]
    genre_names = list(genres)

    prompt = f"""
    Based on the following music preferences, describe the personality, fashion, and behavior traits of someone who listens to this kind of music:

    Top Artists: {', '.join(artist_names)}
    Top Genres: {', '.join(genre_names)}

    The person enjoys these musical styles. What are they like in terms of personality, fashion choices, and what might their hobbies or interests be?
    """
    return prompt

def get_music_description(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # or "gpt-4"
        messages=[{"role": "user", "content": prompt}],
        max_tokens=200,
        temperature=0.7,
    )
    description = response.choices[0].message['content'].strip()
    return description





def callback(request):
    code = request.GET.get('code')
    state = request.GET.get('state')

    if not code:
        return HttpResponse("No authorization code received", status=400)

    # Exchange the authorization code for an access token
    auth = (settings.SPOTIFY_CLIENT_ID, settings.SPOTIFY_CLIENT_SECRET)
    data = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': settings.SPOTIFY_REDIRECT_URI,
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
    }

    token_url = 'https://accounts.spotify.com/api/token'
    response = requests.post(token_url, data=data, headers=headers, auth=auth)

    if response.status_code != 200:
        return HttpResponse("Error fetching token", status=500)

    token_data = response.json()
    access_token = token_data.get('access_token')

    if not access_token:
        return HttpResponse("Failed to retrieve access token", status=500)

    # Save access token to session
    request.session['spotify_token'] = access_token

    # Fetch user profile data from Spotify
    user_profile_url = 'https://api.spotify.com/v1/me'
    user_profile_headers = {
        'Authorization': f'Bearer {access_token}',
    }
    user_profile_response = requests.get(user_profile_url, headers=user_profile_headers)

    if user_profile_response.status_code != 200:
        return HttpResponse("Error fetching user profile", status=500)

    user_profile = user_profile_response.json()

    # Fetch playlists
    sp = spotipy.Spotify(auth=access_token)
    playlists = sp.current_user_playlists()
    top_tracks = sp.current_user_top_tracks(limit=5)
    top_artists = sp.current_user_top_artists(limit=5)
    total_minutes = 0  # Variable to store total listening time in minutes

    genres = set()  # Using a set to avoid duplicates
    for artist in top_artists['items']:
        artist_info = sp.artist(artist['id'])  # Get detailed artist information
        genres.update(artist_info['genres'])

    music_description_prompt = create_music_profile_description(top_artists, genres)
    music_description = get_music_description(music_description_prompt)


    top_tracks = sp.current_user_top_tracks(limit=5)
    top_tracks_with_previews = []

    for track in top_tracks['items']:
        preview_url = track['preview_url']  # Spotify provides 30-second preview URL
        top_tracks_with_previews.append({
            'name': track['name'],
            'artists': [artist['name'] for artist in track['artists']],
            'album_image': track['album']['images'][0]['url'] if track['album']['images'] else None,
            'preview_url': preview_url
        })

    # Pass the list of top tracks with previews to the template
    return render(request, 'registration/logged_in.html', {
        'profile': user_profile,
        'playlists': playlists['items'],
        'top_tracks': top_tracks_with_previews,
        'top_artists': top_artists['items'],
        'genres': list(genres) if genres else None,
        'total_minutes': round(total_minutes, 2) if total_minutes else None,
        'music_description': music_description,  # Send the description generated by the LLM
    })